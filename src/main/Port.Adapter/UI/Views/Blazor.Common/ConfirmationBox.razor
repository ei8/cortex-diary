@if (this.IsVisible)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">@this.Title</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close" @onclick="Close">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current forecast -->
                <div class="modal-body">
                    @this.Message 
                    <br />
                    <br />
                    <!-- Button to confirm delete -->
                    <button class="btn btn-primary" @onclick="Confirm">
                        Yes
                    </button>
                    <button class="btn btn-secondary" @onclick="Close">
                        No
                    </button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public EventCallback OnConfirmCallback { get; set; }

    [Parameter]
    public EventCallback OnCloseCallback { get; set; }

    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public string Title { get; set; }

    private bool isVisible;
    [Parameter]
    public bool IsVisible
    {
        get => this.isVisible;
        set
        {
            if (this.isVisible != value)
            {
                this.isVisible = value;
                this.IsVisibleChanged.InvokeAsync(this.isVisible);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private async void Close()
    {
        this.IsVisible = false;
        if (this.OnCloseCallback.HasDelegate)
            await this.OnCloseCallback.InvokeAsync(this);
    }

    private async void Confirm()
    {
        this.Close();
        await this.OnConfirmCallback.InvokeAsync(this);
    }
}
