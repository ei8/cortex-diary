@using ei8.Cortex.Diary.Domain.Model
@using ei8.Cortex.Diary.Application.Settings
@using ei8.Cortex.Diary.Application
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.ViewModels
@using ei8.Cortex.Diary.Port.Adapter.Common;

@inject ITokenProvider tokenProvider
@inject IEnumerable<View> views
@inject NavigationManager navigationManager
@inject IToastService toastService
@inject ISettingsService settingsService

<Bar Background="Background.Dark" ThemeContrast="ThemeContrast.Dark"
     Mode="@(this.NavBarType == NavBarType.Side ? BarMode.VerticalInline : BarMode.Horizontal)" CollapseMode="BarCollapseMode.Small"
     Visible="@(this.NavBarType == NavBarType.Side)">
    <BarBrand>
        <BarItem>
            <BarLink To="">
                <BarIcon IconName="brandLogo" />
                @(string.IsNullOrEmpty(settingsService.Title) ? " neurUL <# " : settingsService.Title)
            </BarLink>
        </BarItem>
    </BarBrand>
    <BarToggler />
    <BarMenu Class="@(this.NavBarType == NavBarType.Top ? "m-2" : string.Empty)">
        <BarStart>
            @foreach (var v in this.views.Where(vi => string.IsNullOrWhiteSpace(vi.ParentUrl)))
            {
                <BarItem Class=@(this.GetBarActiveClassValue(v))>
                    @if (this.views.Any(vi => vi.ParentUrl == v.Url))
                    {
                        <ParentBarLink CurrentView="@v"/>
                    }
                    else
                    {
                        <BarLink Clicked="() => this.Navigate(v.Url)">
                            <BarIcon IconName="v.GenerateIconName()" />
                            @v.Name
                        </BarLink>
                    }
                </BarItem>
            }
        </BarStart>
        <BarEnd>
            <BarItem>
                <AuthorizeView>
                    <NotAuthorized />
                    <Authorized>
                        <BarDropdown>
                            <BarDropdownToggle>
                                <BarIcon IconName="IconName.Wrench" />
                                Settings
                            </BarDropdownToggle>
                            <BarDropdownMenu>
                                <BarDropdownItem To="#">
                                    Profile
                                </BarDropdownItem>
                                <BarDropdownItem To="#">
                                    Privacy
                                </BarDropdownItem>
                                <BarDropdownItem To="#">
                                    Appearance
                                </BarDropdownItem>
                            </BarDropdownMenu>
                        </BarDropdown>
                    </Authorized>
                </AuthorizeView>
            </BarItem>
            <BarItem>
                <AuthorizeView>
                    <NotAuthorized>
                        <BarLink To="@(this.settingsService.BasePath + "/loginidp")">
                            <BarIcon IconName="signIn" />
                            Sign in
                        </BarLink>
                    </NotAuthorized>
                    <Authorized>
                        <form action=@(this.settingsService.BasePath + "/logoutidp") method="post" id="ff">
                            <BarLink href="#" onclick="frmsubmit('ff');">
                                <BarIcon IconName="signOut" />
                                @context.User.Identity.Name.Truncate(15)
                                <span style="padding-left: 5px; font-size: smaller; font-style: italic">(Sign out)</span>
                            </BarLink>
                            <input name="__RequestVerificationToken" type="hidden" value="@this.tokenProvider.XsrfToken">
                        </form>
                    </Authorized>
                </AuthorizeView>
            </BarItem>
        </BarEnd>
    </BarMenu>
</Bar>

@code
{
    private void Navigate(string url)
    {
        this.navigationManager.NavigateTo(url, true);
    }

    private string GetBarActiveClassValue(View value) =>
        value.Url == this.navigationManager.Uri ? "bar-active hover" : "hover";

    [Parameter]
    public NavBarType NavBarType { get; set; }

    RenderFragment brandLogo = @<img src="dasz.ico" alt="Home" style="width:30px; height:30px">;
    RenderFragment signIn = @<span class="oi oi-account-login" aria-hidden="true"></span>;
    RenderFragment signOut = @<span class="oi oi-account-logout" aria-hidden="true"></span>;
}
