@using Blazorise.Icons.FontAwesome
@using ei8.Cortex.Diary.Application.Neurons;
@using ei8.Cortex.Diary.Application.Notifications;
@using ei8.Cortex.Library.Client;
@using ei8.Cortex.Library.Common;
@using ei8.Cortex.Diary.Port.Adapter.Common;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.ViewModels;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Modal;
@using ei8.Cortex.Diary.Domain.Model;
@using neurUL.Cortex.Common;
@using neurUL.Common.Http;
@using Blazored.FluentValidation;

@inject INeuronQueryService neuronQueryService;
@inject INeuronApplicationService neuronApplicationService;
@inject INotificationApplicationService notificationApplicationService;
@inject ITerminalApplicationService terminalApplicationService;
@inject IToastService toastService;

<ConfirmationBox Title="Confirm Owner Creation" Message='This Avatar needs to be initialized with an Owner Neuron. Do you wish to continue creating one?' @bind-IsVisible="@this.IsConfirmCreateOwnerVisible" OnConfirmCallback="@this.ConfirmCreateOwner" />
<ConfirmationBox Title="Similar Neuron Exists" Message='At least one other Neuron containing a similar Tag value already exists. Are you sure you wish to continue?' @bind-IsVisible="@this.IsConfirmCreateSimilarVisible" OnConfirmCallback="@this.ConfirmCreateSimilar" />
<ConfirmationBox Title="Confirm Delete" Message='@(this.ProcessSelectionTag("Are you sure you want to delete Terminal linking Neuron '{0}' to '{1}'?"))' @bind-IsVisible="@this.IsConfirmDeleteVisible" OnConfirmCallback="@this.ConfirmDelete" />
<div class="container-fluid">
    <EditForm EditContext="@this.editContext" OnSubmit=@this.FormSubmitted>
        <FluentValidationValidator />
        <div class="row">
            <div class="col p-0">
                <div class="container-fluid">
                    @if (!(this.SelectedOption == ContextMenuOption.New || this.SelectedOption == ContextMenuOption.Delete))
                    // if editing
                    {
                        // show option description
                        <div class="row">
                            <div class="col p-0 pt-1">
                                <p class="p-0 m-0 font-weight-bold">
                                    @this.GetOptionDescription()
                                </p>
                            </div>
                        </div>
                    }
                    @* show terminals list and search buttons*@
                    <div class="row pt-1">
                        <div class="col-auto p-0">
                            <button type="button" class="btn btn-secondary btn-sm rounded-square" @onclick="this.OnAddTerminal">
                                <Blazorise.Icon Name="FontAwesomeIcons.Plus" />
                            </button>
                            <button type="button" disabled="@(this.EditTerminal == null || this.selectedOption == ContextMenuOption.Edit)" class="btn btn-secondary btn-sm rounded-square" @onclick="this.OnEditTerminal">
                                <Blazorise.Icon Name="FontAwesomeIcons.Edit" />
                            </button>
                            <button type="button" disabled="@((this.selectedOption == ContextMenuOption.Edit && this.selectedNeuron == null) || this.EditTerminal == null)" class="btn btn-secondary btn-sm rounded-square" @onclick="this.OnRemoveTerminal">
                                <Blazorise.Icon Name="FontAwesomeIcons.Trash" />
                            </button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col p-0" style="@(this.editorNeuronViewModel.Terminals.Count() > 4 ? "overflow-y:scroll; height:120px" : string.Empty)">
                            <ListView Items="@this.editorNeuronViewModel.Terminals" Render="@(this.editorNeuronViewModel.Terminals.Any())" ListCssClass="pl-4 mt-2 mb-0">
                                <ItemTemplate Context="itemContext">
                                    <ConditionalDisplay Show="@true">
                                        <li style="list-style:none" @key="@itemContext.Id">
                                            <input type="radio" id="@itemContext.Id" checked="@(this.EditTerminal != null && this.EditTerminal.Id == itemContext.Id)" @onchange="@(() => { this.EditTerminal = itemContext; })" />
                                            <label for="@itemContext.NeuronTag">@(!string.IsNullOrEmpty(itemContext.NeuronTag) ? itemContext.NeuronTag : " ")</label>
                                        </li>
                                    </ConditionalDisplay>
                                </ItemTemplate>
                            </ListView>
                            <ValidationMessage For=@(() => this.editorNeuronViewModel.Terminals) />
                        </div>
                    </div>
                    <div class="row"
                        <div class="col py-1 px-0">
                            <KeyWatcherInputTextArea class="form-control w-100" placeholder="Tag" @bind-Value="@this.editorNeuronViewModel.Tag" rows="4" @onkeydown="@this.KeyPress" />
                            <ValidationMessage For=@(() => this.editorNeuronViewModel.Tag) />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-auto pb-1 pr-1 p-0">
                            <button type="button" class="btn btn-secondary btn-sm" @onclick="this.OnSearchRegionNeuron">
                                <Blazorise.Icon Name="FontAwesomeIcons.ChartPie" />
                            </button>
                        </div>
                        <div class="col-auto pb-1 p-0">
                            <input class="form-control-sm" style="width:150px" readonly="readonly" value="@this.editorNeuronViewModel.RegionTag" />
                        </div>
                        <div class="col-auto pb-1 p-0">
                            @if (string.IsNullOrWhiteSpace(this.editorNeuronViewModel.NeuronExternalReferenceUrl))
                            {
                                <button type="button" class="btn btn-light btn-sm ml-1 p-1 rounded-square" @onclick="this.OnSearchExternalReferenceNeuron" title="Internal Neuron (Click to edit)">
                                    <Blazorise.Icon Name="FontAwesomeIcons.Brain" Class="px-1" />
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-light btn-sm ml-1 p-1 rounded-square" @onclick="this.OnSearchExternalReferenceNeuron" title="@(this.editorNeuronViewModel.NeuronExternalReferenceUrl + " (Click to edit)")">
                                    <Blazorise.Icon Name="FontAwesomeIcons.Globe" Class="px-1" />
                                </button>
                            }
                        </div>
                        <div class="col-auto ml-auto p-0">
                            <button type="button" class="btn btn-warning btn-sm ml-1 p-1 rounded-square" @onclick="OnCancel">
                                <Blazorise.Icon Name="FontAwesomeIcons.Ban" Class="px-1" />
                            </button>
                            <button type="submit" class="btn btn-primary btn-sm ml-1 p-1 rounded-square" disabled="@(this.sending)">
                                @if (this.sending)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <Blazorise.Icon Name="FontAwesomeIcons.PaperPlane" Class="px-1" />
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>
<RegionSearchBox AvatarUrl="@this.AvatarUrl" @bind-IsVisible="@this.IsSearchRegionNeuronVisible" @bind-SelectedNeuron="this.SelectedRegionNeuron" />
<TerminalEditorBox AvatarUrl="@this.AvatarUrl" @bind-IsVisible="@this.IsTerminalEditorVisible" SelectedTerminal="this.EditTerminal" @bind-ResultTerminal="this.ResultTerminal" />
<NeuronSearchBox AvatarUrl="@this.editorNeuronViewModel.NeuronExternalReferenceUrl" @bind-IsVisible="@this.IsSearchExternalReferenceNeuronVisible" @bind-SelectedNeuron="this.SelectedExternalReferenceNeuron" />

@code {
    private EditorNeuronViewModel editorNeuronViewModel = new EditorNeuronViewModel();
    private Neuron preEditCopy = null;
    private bool sending = false;
    private EditContext editContext;

    public EditorBox()
    {
        this.internalSelectedRegionNeuronChanged = EventCallback.Factory.Create(this, new Func<NeuronResultItemViewModel, Task>(this.HandleSelectedRegionNeuronChanged));
        this.internalSelectedOptionChanged = EventCallback.Factory.Create(this, new Func<ContextMenuOption, Task>(this.HandleSelectionOptionChanged));
        this.internalResultTerminalChanged = EventCallback.Factory.Create(this, new Func<EditorTerminalViewModel, Task>(this.HandleResultTerminalChanged));
    }

    protected override void OnInitialized()
    {
        this.editContext = new EditContext(this.editorNeuronViewModel);        
    }

    private string ProcessSelectionTag(string format) => (this.selectedOption != ContextMenuOption.Edit || this.selectedNeuron != null) && this.EditTerminal != null ?
        string.Format(format, (this.selectedOption == ContextMenuOption.Edit ? this.selectedNeuron.Tag : this.editorNeuronViewModel.Tag), this.EditTerminal.NeuronTag) :
        "[Error: Both SelectedNeuron and EditTerminal should not be null]";

    private async Task HandleSelectedRegionNeuronChanged(NeuronResultItemViewModel value)
    {
        if (value != null)
        {
            this.editorNeuronViewModel.RegionId = value.Neuron.Id;
            this.editorNeuronViewModel.RegionTag = value.Neuron.Tag;
        }
        else
            // should use null region
            this.editorNeuronViewModel.InitializeRegion(false);
    }

    private async Task HandleSelectionOptionChanged(ContextMenuOption value)
    {
        switch (this.selectedOption)
        {
            case ContextMenuOption.New:
                this.editorNeuronViewModel.Initialize();
                break;

            case ContextMenuOption.Edit:
                if (this.selectedNeuron != null)
                {
                    if (QueryUrl.TryParse(this.AvatarUrl, out QueryUrl resultQuery))
                    {
                        this.preEditCopy = new Neuron(this.selectedNeuron);

                        // similar to NeuronViewModelBase.SetNeuron
                        this.editorNeuronViewModel.Id = this.selectedNeuron.Id;
                        this.editorNeuronViewModel.Tag = this.selectedNeuron.Tag;
                        this.SelectedRegionNeuron = this.selectedNeuron.Region.Id != null ?
                            new NeuronResultItemViewModel(new Neuron()
                                {
                                    Id = this.selectedNeuron.Region.Id,
                                    Tag = this.selectedNeuron.Region.Tag
                                }) :
                            null;

                        // force region sync
                        await this.HandleSelectedRegionNeuronChanged(this.SelectedRegionNeuron);

                        this.editorNeuronViewModel.Version = this.selectedNeuron.Version;
                        this.editorNeuronViewModel.NeuronExternalReferenceUrl = this.selectedNeuron.ExternalReferenceUrl;

                        await EditorBox.ReloadTerminals(
                            resultQuery.AvatarUrl,
                            this.selectedNeuron.Id,
                            this.neuronQueryService,
                            this.toastService,
                            this.editorNeuronViewModel
                            );

                        // TODO:
                        //this.TerminalCreation = new AuthorEventInfo(neuron.Terminal.Creation);
                        //this.TerminalLastModification = new AuthorEventInfo(neuron.Terminal.LastModification);
                    }
                }
                break;
            case ContextMenuOption.AddRelative:
                // auto-add selectedNeuron as Terminal
                if (this.selectedNeuron != null)
                {
                    this.editorNeuronViewModel.Initialize();
                    this.editorNeuronViewModel.Terminals = new EditorTerminalViewModel[]
                    {
                    new EditorTerminalViewModel()
                    {
                        Id = Guid.NewGuid().ToString(),
                        Neuron = new Neuron(this.selectedNeuron),
                        Effect = NeurotransmitterEffect.Excite,
                        Strength = 1,
                        Type = RelativeType.Postsynaptic
                    }
                    };
                }
                break;
        }
    }

    private async static Task ReloadTerminals(string avatarUrl, string centralId, INeuronQueryService neuronQueryService, IToastService toastService, EditorNeuronViewModel editorNeuronViewModel)
    {
        await Blazor.Helper.UITryHandler(
            async () =>
            {
                var terminalNeurons = new QueryResult<Neuron>();
                terminalNeurons = await neuronQueryService.GetNeurons(avatarUrl, centralId, new NeuronQuery());
                editorNeuronViewModel.Terminals = terminalNeurons.Items.Select(n => new EditorTerminalViewModel()
                {
                    Id = n.Terminal.Id,
                    Neuron = new Neuron(n),
                    Type = n.Type,
                    Effect = Enum.TryParse<NeurotransmitterEffect>(n.Terminal.Effect, out NeurotransmitterEffect effect) ? effect : NeurotransmitterEffect.NotSet,
                    Strength = float.TryParse(n.Terminal.Strength, out float strength) ? strength : 0,
                    TerminalExternalReferenceUrl = n.Terminal.ExternalReferenceUrl,
                    Version = n.Terminal.Version
                }).ToArray();

                return false;
            },
            toastService,
            () => "Neuron Terminals retrieval"
        );
    }

    private async Task HandleResultTerminalChanged(EditorTerminalViewModel value)
    {
        if (this.resultTerminal != null)
        {
            // if editing
            if (this.selectedOption == ContextMenuOption.Edit)
            {
                // if add-terminal
                if (string.IsNullOrWhiteSpace(this.resultTerminal.Id))
                {
                    var avatarBaseUrl = string.Empty;
                    if (await this.ProcessSend(
                        async (rq, pi) =>
                        {
                            pi.Description = "Terminal creation";
                            // add directly via API
                            this.resultTerminal.Id = Guid.NewGuid().ToString();

                            await Blazor.Helper.CreateTerminalFromViewModel(
                                this.resultTerminal,
                                this.editorNeuronViewModel.Id,
                                this.terminalApplicationService,
                                rq.AvatarUrl
                                );

                            avatarBaseUrl = rq.AvatarUrl;
                            return true;
                        },
                        null
                    ))
                    {
                        // TODO: make configurable
                        await Task.Delay(2000);
                        await EditorBox.ReloadTerminals(
                            avatarBaseUrl,
                            this.selectedNeuron.Id,
                            this.neuronQueryService,
                            this.toastService,
                            this.editorNeuronViewModel
                            );
                    }
                }
                // else if edit-terminal
                else
                {
                    // TODO: update directly via API
                    // TODO: add support for Terminal edits
                }
            }
            else
            {
                // ... if add-terminal
                if (string.IsNullOrWhiteSpace(this.resultTerminal.Id))
                {
                    this.resultTerminal.Id = Guid.NewGuid().ToString();
                    // ...... add only to Terminals
                    this.editorNeuronViewModel.Terminals = this.editorNeuronViewModel.Terminals.Append(this.resultTerminal).ToArray();
                }
                // ... else if edit-terminal
                else
                {
                    // ...... replace in-memory terminal
                    var tempList = this.editorNeuronViewModel.Terminals.ToList();
                    var preIndex = tempList.FindIndex(etvm => this.resultTerminal.Id == etvm.Id);
                    tempList.RemoveAt(preIndex);
                    this.editorNeuronViewModel.Terminals = tempList.ToArray();

                    if (preIndex >= this.editorNeuronViewModel.Terminals.Count)
                        this.editorNeuronViewModel.Terminals = this.editorNeuronViewModel.Terminals.Append(this.resultTerminal).ToArray();
                    else
                    {
                        tempList = this.editorNeuronViewModel.Terminals.ToList();
                        tempList.Insert(preIndex, this.resultTerminal);
                        this.editorNeuronViewModel.Terminals = tempList.ToArray();
                    }
                }
            }

            this.resultTerminal = null;
        }
    }

    [Parameter]
    public string AvatarUrl { get; set; }

    private EditorTerminalViewModel EditTerminal { get; set; }

    private ContextMenuOption selectedOption;
    [Parameter]
    public ContextMenuOption SelectedOption
    {
        get => this.selectedOption;
        set
        {
            if (this.selectedOption != value)
            {
                this.selectedOption = value;

                this.internalSelectedOptionChanged.InvokeAsync(this.selectedOption);
                this.SelectedOptionChanged.InvokeAsync(this.selectedOption);
            }
        }
    }

    private EventCallback<ContextMenuOption> internalSelectedOptionChanged { get; set; }
    [Parameter]
    public EventCallback<ContextMenuOption> SelectedOptionChanged { get; set; }

    private Neuron selectedNeuron;
    [Parameter]
    public Neuron SelectedNeuron
    {
        get => this.selectedNeuron;
        set
        {
            if (this.selectedNeuron != value)
                this.selectedNeuron = value;
        }
    }

    private EventCallback<NeuronResultItemViewModel> internalSelectedRegionNeuronChanged { get; set; }
    private NeuronResultItemViewModel selectedRegionNeuron;
    private NeuronResultItemViewModel SelectedRegionNeuron
    {
        get => this.selectedRegionNeuron;
        set
        {
            if (this.selectedRegionNeuron?.Neuron?.Id != value?.Neuron?.Id)
            {
                this.selectedRegionNeuron = value;
                this.internalSelectedRegionNeuronChanged.InvokeAsync(this.selectedRegionNeuron);
            }
        }
    }

    private Neuron initialRegionNeuron;
    [Parameter]
    public Neuron InitialRegionNeuron
    {
        get => this.initialRegionNeuron;
        set
        {
            if (this.initialRegionNeuron != value)
            {
                this.initialRegionNeuron = value;

                if (this.initialRegionNeuron != null)
                {
                    this.editorNeuronViewModel.InitialRegionId = this.initialRegionNeuron.Id;
                    this.editorNeuronViewModel.InitialRegionTag = this.initialRegionNeuron.Tag;
                }
                else
                    this.editorNeuronViewModel.ClearInitialRegion();
            }
        }
    }

    private IEnumerable<Neuron> initialPostsynapticNeurons;
    [Parameter]
    public IEnumerable<Neuron> InitialPostsynapticNeurons
    {
        get => this.initialPostsynapticNeurons;
        set
        {
            if (this.initialPostsynapticNeurons != value)
            {
                this.initialPostsynapticNeurons = value;

                if (this.initialPostsynapticNeurons != null)
                    this.editorNeuronViewModel.InitialPostsynaptics = this.initialPostsynapticNeurons;
                else
                    this.editorNeuronViewModel.InitializePostsynaptic();
            }
        }
    }

    private bool IsSearchRegionNeuronVisible { get; set; } = false;

    private EventCallback<EditorTerminalViewModel> internalResultTerminalChanged;

    private EditorTerminalViewModel resultTerminal;
    public EditorTerminalViewModel ResultTerminal
    {
        get => this.resultTerminal;
        set
        {
            if (this.resultTerminal != value)
            {
                this.resultTerminal = value;
                this.internalResultTerminalChanged.InvokeAsync(this.resultTerminal);
            }
        }
    }

    private bool isTerminalEditorVisible = false;
    private bool IsTerminalEditorVisible
    {
        get => this.isTerminalEditorVisible;
        set
        {
            if (this.isTerminalEditorVisible != value)
            {
                this.isTerminalEditorVisible = value;

                if (!this.isTerminalEditorVisible)
                    this.EditTerminal = null;
            }
        }
    }

    private NeuronResultItemViewModel selectedExternalReferenceNeuron;
    private NeuronResultItemViewModel SelectedExternalReferenceNeuron
    {
        get => this.selectedExternalReferenceNeuron;
        set
        {
            if (this.selectedExternalReferenceNeuron != value)
            {
                this.selectedExternalReferenceNeuron = value;
            }
        }
    }

    private bool isSearchExternalReferenceNeuronVisible = false;
    private bool IsSearchExternalReferenceNeuronVisible
    {
        get => this.isSearchExternalReferenceNeuronVisible;
        set
        {
            if (this.isSearchExternalReferenceNeuronVisible != value)
            {
                this.isSearchExternalReferenceNeuronVisible = value;

                if (!this.isSearchExternalReferenceNeuronVisible)
                {
                    if (this.selectedExternalReferenceNeuron != null)
                    {
                        this.editorNeuronViewModel.NeuronExternalReferenceUrl = this.selectedExternalReferenceNeuron.Neuron.Url;
                        this.selectedExternalReferenceNeuron = null;
                    }
                    else
                        this.editorNeuronViewModel.NeuronExternalReferenceUrl = string.Empty;
                }
            }
        }
    }

    private async Task KeyPress(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && e.CtrlKey)
        {
            await this.FormSubmitted(this.editContext);
        }
    }

    private async Task FormSubmitted(EditContext editContext)
    {
        bool formValid = editContext.Validate();
        if (formValid)
        {
            await this.ProcessSend(
                async (rq, pi) =>
                {
                    bool result = false;
                    switch (this.SelectedOption)
                    {
                        case ContextMenuOption.New:
                            pi.Description = "Neuron creation";
                            this.IsConfirmCreateOwnerVisible =
                                (await this.notificationApplicationService.GetNotificationLog(rq.AvatarUrl, string.Empty))
                                .NotificationList.Count == 0;

                            if (!this.IsConfirmCreateOwnerVisible)
                                result = await EditorBox.CreateNeuron(
                                    this.editorNeuronViewModel,
                                    this.neuronQueryService,
                                    this.neuronApplicationService,
                                    this.terminalApplicationService,
                                    rq,
                                    pi,
                                    () => this.IsConfirmCreateSimilarVisible = true
                                );
                            else
                                pi.Suspend = true;

                            break;
                        case ContextMenuOption.Edit:
                            pi.Description = "Neuron modification";
                            // TODO: indicate how many and which changes succeeded/failed
                            if (this.editorNeuronViewModel.Tag != this.preEditCopy.Tag)
                            {
                                await this.neuronApplicationService.ChangeNeuronTag(
                                    rq.AvatarUrl,
                                    this.editorNeuronViewModel.Id,
                                    this.editorNeuronViewModel.Tag,
                                    this.editorNeuronViewModel.Version
                                    );
                            }
                            if (this.editorNeuronViewModel.RegionId != this.preEditCopy.Region.Id)
                            {
                                await this.neuronApplicationService.ChangeNeuronRegionId(
                                    rq.AvatarUrl,
                                    this.editorNeuronViewModel.Id,
                                    this.editorNeuronViewModel.RegionId,
                                    this.editorNeuronViewModel.Version
                                    );
                            }
                            if (this.editorNeuronViewModel.NeuronExternalReferenceUrl != this.preEditCopy.ExternalReferenceUrl)
                            {
                                await this.neuronApplicationService.ChangeNeuronExternalReferenceUrl(
                                    rq.AvatarUrl,
                                    this.editorNeuronViewModel.Id,
                                    this.editorNeuronViewModel.NeuronExternalReferenceUrl,
                                    this.editorNeuronViewModel.Version
                                    );
                            }
                            result = true;
                            break;
                        case ContextMenuOption.AddRelative:
                            pi.Description = "Relative addition";
                            result = await EditorBox.CreateNeuron(
                                this.editorNeuronViewModel,
                                this.neuronQueryService,
                                this.neuronApplicationService,
                                this.terminalApplicationService,
                                rq,
                                pi,
                                () => this.IsConfirmCreateSimilarVisible = true
                            );
                            break;
                    }
                    return result;
                },
                () => Blazor.Helper.ReinitializeOption(o => this.SelectedOption = o)
            );
        }
    }

    private async static Task<bool> CreateNeuron(EditorNeuronViewModel editorNeuronViewModel, INeuronQueryService neuronQueryService, INeuronApplicationService neuronApplicationService, ITerminalApplicationService terminalApplicationService, QueryUrl rq, ProcessInfo pi, Action hasSimilarHandler)
    {
        bool result = false;
        var items = (await neuronQueryService.GetNeurons(
            rq.AvatarUrl,
            neuronQuery: new NeuronQuery()
            {
                TagContains = new string[] { editorNeuronViewModel.Tag },
                TagContainsIgnoreWhitespace = true
            })
        ).Items;

        if (!items.Any())
        {
            await EditorBox.CreateNeuronCore(neuronApplicationService, rq, editorNeuronViewModel, terminalApplicationService);
            result = true;
        }
        else
        {
            if (hasSimilarHandler != null)
                hasSimilarHandler.Invoke();
            pi.Suspend = true;
        }

        return result;
    }

    private async static Task CreateNeuronCore(INeuronApplicationService neuronApplicationService, QueryUrl rq, EditorNeuronViewModel editorNeuronViewModel, ITerminalApplicationService terminalApplicationService)
    {
        var newNeuronId = Guid.NewGuid().ToString();

        await neuronApplicationService.CreateNeuron(
            rq.AvatarUrl,
            newNeuronId,
            editorNeuronViewModel.Tag,
            editorNeuronViewModel.RegionId,
            editorNeuronViewModel.NeuronExternalReferenceUrl
            );

        editorNeuronViewModel.Terminals.ToList().ForEach(async e =>
            await Blazor.Helper.CreateTerminalFromViewModel(e, newNeuronId, terminalApplicationService, rq.AvatarUrl)
        );
    }

    private async Task OnCancel()
    {
        // TODO: ask user if sure to proceed, all unsaved changes (if any) will be lost
        Blazor.Helper.ReinitializeOption(o => this.SelectedOption = o);
    }

    private void OnAddTerminal()
    {
        this.EditTerminal = null;
        this.IsTerminalEditorVisible = true;
    }

    private void OnEditTerminal()
    {
        this.IsTerminalEditorVisible = true;
    }

    private async Task OnRemoveTerminal()
    {
        // if not editing Neuron do the following, otherwise remove directly by calling API
        if (this.selectedOption == ContextMenuOption.Edit)
        {
            this.IsConfirmDeleteVisible = true;
        }
        else
        {
            if (this.EditTerminal != null)
            {
                var lcs = this.editorNeuronViewModel.Terminals;
                lcs = lcs.Where(un => un.Id != this.EditTerminal.Id).ToArray();
                this.editorNeuronViewModel.Terminals = lcs;
                this.EditTerminal = null;
            }
        }
    }

    private void OnSearchRegionNeuron()
    {
        this.IsSearchRegionNeuronVisible = true;
    }

    private void OnSearchExternalReferenceNeuron()
    {
        this.IsSearchExternalReferenceNeuronVisible = true;
    }

    private string GetOptionDescription()
    {
        string result = string.Empty;
        switch (this.SelectedOption)
        {
            case ContextMenuOption.AddRelative:
                result = "Adding New Relative to '{0}'";
                break;
            case ContextMenuOption.Edit:
                result = "Editing '{0}'";
                break;
        }
        return string.Format(result, (this.SelectedNeuron != null ? this.SelectedNeuron.Tag : string.Empty));
    }

    private async Task<bool> ProcessSend(Func<QueryUrl, ProcessInfo, Task<bool>> processCore, Action postProcess)
    {
        bool result = false;
        if (QueryUrl.TryParse(this.AvatarUrl, out QueryUrl resultQuery) && !this.sending)
        {
            var processInfo = new ProcessInfo();

            await Blazor.Helper.UITryHandler(
                async () =>
                {
                    this.sending = true;
                    result = (await processCore.Invoke(resultQuery, processInfo));

                    return !processInfo.Suspend && result;
                },
                this.toastService,
                () => processInfo.Description,
                postActionInvoker: () => this.sending = false
            );

            if (!processInfo.Suspend && postProcess != null)
                postProcess.Invoke();
        }

        return result;
    }

    private bool IsConfirmCreateSimilarVisible { get; set; } = false;

    private async void ConfirmCreateSimilar()
    {
        await this.ProcessSend(
            async (rq, pi) =>
            {
                pi.Description = "Neuron creation";

                await EditorBox.CreateNeuronCore(
                    neuronApplicationService,
                    rq,
                    editorNeuronViewModel,
                    terminalApplicationService
                    );
                return true;
            },
            () => Blazor.Helper.ReinitializeOption(o => this.SelectedOption = o)
        );
    }

    private bool IsConfirmCreateOwnerVisible { get; set; } = false;

    private async void ConfirmCreateOwner()
    {
        await this.ProcessSend(
            async (rq, pi) =>
            {
                pi.Description = "Owner Neuron creation";
                await this.neuronApplicationService.CreateNeuron(
                    rq.AvatarUrl,
                    Guid.NewGuid().ToString(),
                    this.editorNeuronViewModel.Tag,
                    this.editorNeuronViewModel.RegionId,
                    this.editorNeuronViewModel.NeuronExternalReferenceUrl
                    );
                return true;
            },
            () => Blazor.Helper.ReinitializeOption(o => this.SelectedOption = o)
        );
    }

    private bool IsConfirmDeleteVisible { get; set; } = false;

    private async Task ConfirmDelete()
    {
        var avatarBaseUrl = string.Empty;
        if (await this.ProcessSend(
            async (rq, pi) =>
            {
                pi.Description = "Terminal removal";

                await this.terminalApplicationService.DeactivateTerminal(
                    rq.AvatarUrl,
                    this.EditTerminal.Id,
                    this.EditTerminal.Version
                    );

                avatarBaseUrl = rq.AvatarUrl;
                return true;
            },
            () => this.EditTerminal = null
        ))
        {
            // TODO: make configurable
            await Task.Delay(2000);
            await EditorBox.ReloadTerminals(
                avatarBaseUrl,
                this.selectedNeuron.Id,
                this.neuronQueryService,
                this.toastService,
                this.editorNeuronViewModel
                );
        }
    }
}
