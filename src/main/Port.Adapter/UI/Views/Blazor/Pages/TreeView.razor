@using Blazorise.Icons.FontAwesome;
@using ei8.Cortex.Diary.Application.Neurons;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.ViewModels;

<ul @attributes="SetRootStyle()">
    @if (this.Children != null)
    {
        string lastAuthor = string.Empty;
        @foreach (var child in Children)
        {
            string currentAuthor = (child.Neuron.Creation?.Author?.Tag + ((child.Neuron.Creation?.Author?.Id != child.Neuron.UnifiedLastModification?.Author?.Id) ? ", " + child.Neuron.UnifiedLastModification.Author.Tag : string.Empty));
            <li class="p-0 my-1" style="list-style-type: none;">
                <div class="container m-0" style="@this.GetJustifyStyle(child)">
                    <div class="row">
                        <div class="container m-0">
                            @if (currentAuthor != lastAuthor && !this.ShouldRightJustifyBasedOnRoot(child))
                            {
                                lastAuthor = currentAuthor;
                                <div class="row">
                                    <div class="col-auto p-1" />
                                    <div class="col-auto">
                                        <small style="font-size:x-small">
                                            @lastAuthor
                                        </small>
                                    </div>
                                </div>
                            }
                            <div class="treeitem row">
                                @if (this.ShouldRightJustifyBasedOnRoot(child))
                                {
                                    <button class="treeitembutton btn btn-light btn-xs ml-1 rounded-circle" disabled="@(!this.ControlsEnabled)" @onclick="() => this.RequestItemMenu(child)">
                                        <Blazorise.Icon Name="FontAwesomeIcons.EllipsisV" />
                                    </button>
                                    <button class="treeitembutton btn btn-light btn-xs ml-1 mr-1 rounded-circle" disabled="@(!this.ControlsEnabled)" @onclick="() => this.RequestItemInfo(child)">
                                        <Blazorise.Icon Name="FontAwesomeIcons.InfoCircle" />
                                    </button>
                                    @if (
                                        !string.IsNullOrWhiteSpace(child.Neuron.ExternalReferenceUrl) ||
                                        (child.Neuron.Terminal != null && !string.IsNullOrWhiteSpace(child.Neuron.Terminal.ExternalReferenceUrl))
                                    )
                                    {
                                        <Blazorise.Icon Name="FontAwesomeIcons.Globe" Class="fa-xs pt-2 px-1" Size="small" />
                                    }
                                }
                                @if (@child.ExpansionState == ExpansionState.Collapsed)
                                {
                                    <button class="btn btn-light btn-xs rounded-circle" style="background-color: white; border-color: white" @onclick="child.Toggle">
                                        <span class="small text-secondary">&#x25B7;</span>
                                    </button>
                                }
                                else if (@child.ExpansionState == ExpansionState.Expanded)
                                {
                                    <button class="btn btn-light btn-xs rounded-circle" style="background-color: white; border-color: white" @onclick="child.Toggle">
                                        <span class="small text-secondary">&#x25E2;</span>
                                    </button>
                                }
                                else
                                {
                                    <div class="spinner-border spinner-border-sm m-1" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                }
                                <div class="col-auto p-0 align-self-center" @attributes="GetAttributes(child)">
                                    @if (child.Neuron.Type != Library.Common.RelativeType.NotSet)
                                    {
                                        if (child.Neuron.Terminal.Strength == "1")
                                        {
                                            @if (child.Neuron.Type == Library.Common.RelativeType.Postsynaptic)
                                            {
                                                <span>&#x21FE;</span>
                                            }
                                            else
                                            {
                                                <span>&#x21FD;</span>
                                            }
                                        }
                                        else
                                        {
                                            @if (child.Neuron.Type == Library.Common.RelativeType.Postsynaptic)
                                            {
                                                <span>&#x290F;</span>
                                            }
                                            else
                                            {
                                                <span>&#x290E;</span>
                                            }
                                        }
                                    }
                                </div>
                                <div onmouseover="hover(this)" onmouseout="unhover(this)" class="col-auto p-1" id="@child.Neuron.Id"  style="max-width:75%; @this.GetStyleByCreationAuthor(child.Neuron.Validation.IsCurrentUserCreationAuthor)">
                                    @if (child.Neuron.Validation.RestrictionReasons.Count() > 0)
                                    {
                                        <div class="tooltip-wrapper">
                                            <span class="tooltip-wrapper-text">@((MarkupString) string.Join(Environment.NewLine, child.Neuron.Validation.RestrictionReasons.ToArray()))</span>
                                            <Blazorise.Icon Name="FontAwesomeIcons.Lock" IconStyle="IconStyle.Light" />
                                        </div>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(child.Neuron.Tag))
                                    {
                                        var tagLines = child.Neuron.Tag.Split("\n");
                                        @foreach(var line in tagLines)
                                        {
                                            @if (Array.IndexOf(tagLines, line) > 0)
                                            {
                                                <br />
                                            }
                                            @foreach(var c in line)
                                            {
                                                @if (c == ' ')
                                                {
                                                    @:&nbsp;
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                            @line.TrimStart()
                                        }                                        
                                    }
                                </div>
                                @if (!this.ShouldRightJustifyBasedOnRoot(child))
                                {
                                    @if (
                                        !string.IsNullOrWhiteSpace(child.Neuron.ExternalReferenceUrl) ||
                                        (child.Neuron.Terminal != null && !string.IsNullOrWhiteSpace(child.Neuron.Terminal.ExternalReferenceUrl))
                                    )
                                    {
                                        <Blazorise.Icon Name="FontAwesomeIcons.Globe" Class="fa-xs pt-2 px-1" Size="small" />
                                    }
                                    <button class="treeitembutton btn btn-light btn-xs ml-1 rounded-circle" disabled="@(!this.ControlsEnabled)" @onclick="() => this.RequestItemInfo(child)">
                                        <Blazorise.Icon Name="FontAwesomeIcons.InfoCircle" />
                                    </button>
                                    <button class="treeitembutton btn btn-light btn-xs ml-1 rounded-circle" disabled="@(!this.ControlsEnabled)" @onclick="() => this.RequestItemMenu(child)">
                                        <Blazorise.Icon Name="FontAwesomeIcons.EllipsisV" />
                                    </button>
                                }
                            </div>
                            @if (child.ExpansionState == ExpansionState.Expanded)
                            {
                                <div class="row">
                                    <TreeView Children="@child.Children" AvatarUrl="@this.AvatarUrl" @bind-SelectedNeuron="@this.SelectedNeuron" OnMenuRequested="@this.MenuRequested"
                                                OnInfoRequested="@this.InfoRequested" @bind-ControlsEnabled="@this.ControlsEnabled" IsRoot="false" IsRootRightJustified="@(this.ShouldRightJustifyBasedOnRoot(child))" />
                                </div>
                            }
                            @if (this.renderDirection == RenderDirectionValue.BottomToTop && this.Children.LastOrDefault() == child)
                            {
                                <div class="row">
                                    <h1 id="bottom" />
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </li>
        }
    }
</ul>

@code {
    [Parameter]
    public IList<NeuronViewModel> Children { get; set; } = new List<NeuronViewModel>();

    [Parameter]
    public bool IsRoot { get; set; } = true;

    [Parameter]
    public bool IsRootRightJustified { get; set; } = false;

    [Parameter]
    public string AvatarUrl { get; set; }

    [Parameter]
    public EventCallback OnMenuRequested { get; set; }

    [Parameter]
    public EventCallback OnInfoRequested { get; set; }

    [Parameter]
    public EventCallback<RenderDirectionValue> RenderDirectionChanged { get; set; }

    private RenderDirectionValue renderDirection;
    [Parameter]
    public RenderDirectionValue RenderDirection
    {
        get => this.renderDirection;
        set
        {
            if (this.renderDirection != value)
            {
                this.renderDirection = value;
                this.RenderDirectionChanged.InvokeAsync(this.renderDirection);
            }
        }
    }

    [Parameter]
    public EventCallback<NeuronViewModel> SelectedNeuronChanged { get; set; }

    private NeuronViewModel selectedNeuron;
    [Parameter]
    public NeuronViewModel SelectedNeuron
    {
        get => this.selectedNeuron;
        set
        {
            if (this.selectedNeuron != value)
            {
                this.selectedNeuron = value;
                this.SelectedNeuronChanged.InvokeAsync(this.selectedNeuron);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> ControlsEnabledChanged { get; set; }

    private bool controlsEnabled;
    [Parameter]
    public bool ControlsEnabled
    {
        get => this.controlsEnabled;
        set
        {
            if (this.controlsEnabled != value)
            {
                this.controlsEnabled = value;
                this.ControlsEnabledChanged.InvokeAsync(this.controlsEnabled);
            }
        }
    }

    private bool ShouldRightJustify(NeuronViewModel child)
    {
        return child.Neuron.Validation.IsCurrentUserCreationAuthor && child.Neuron.Type == Library.Common.RelativeType.NotSet;
    }

    private bool ShouldRightJustifyBasedOnRoot(NeuronViewModel child)
    {
        return this.ShouldRightJustify(child) || this.IsRootRightJustified;
    }

    private string GetJustifyStyle(NeuronViewModel child)
    {
        return this.ShouldRightJustify(child) ?
            "display: flex; justify-content: flex-end;" :
            "";
    }

    private string GetStyleByCreationAuthor(bool isCurrentUserCreationAuthor)
    {
        string result = "border-radius:.40rem; ";
        if (isCurrentUserCreationAuthor)
            result += "background-color: #2c87f0; color: #ffffff";
        else
            result += "background-color: #e6e6e6; ";
        return result;
    }

    private async void RequestItemMenu(NeuronViewModel neuronViewModel)
    {
        this.SelectedNeuron = neuronViewModel;
        this.MenuRequested();
    }

    private async void RequestItemInfo(NeuronViewModel neuronViewModel)
    {
        this.SelectedNeuron = neuronViewModel;
        this.InfoRequested();
    }

    private async void MenuRequested()
    {
        await this.OnMenuRequested.InvokeAsync(this);
    }

    private async void InfoRequested()
    {
        await this.OnInfoRequested.InvokeAsync(this);
    }

    Dictionary<string, object> SetRootStyle()
    {
        var dict = new Dictionary<string, object>();
        if (this.IsRoot) dict.Add("style", "padding-left:3px");
        return dict;
    }

    private Dictionary<string, object> GetAttributes(NeuronViewModel child)
    {
        var dict = new Dictionary<string, object>();
        if (child.Neuron.Terminal.Effect == "-1")
            dict.Add("style", "color:red");
        return dict;

    }
}
