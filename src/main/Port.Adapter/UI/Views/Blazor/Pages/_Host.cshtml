@page "/"
@using ei8.Cortex.Diary.Port.Adapter.IO.Process.Services.Identity
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components
@using System.Globalization
@using ei8.Cortex.Diary.Application.Settings
@using ei8.Cortex.Diary.Application.Neurons
@namespace ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@inject ISettingsService settingsService

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@(!string.IsNullOrWhiteSpace(this.settingsService.AppTitle) ? this.settingsService.AppTitle : "neurUL <#")</title>
    <base href=@(this.settingsService.BasePath + "/") />
    <link rel="shortcut icon" type="image/ico" href=@(!string.IsNullOrWhiteSpace(this.settingsService.AppIcon) ? this.settingsService.AppIcon : "dasz.ico")>
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="css/site.css" rel="stylesheet" />
    <script type="text/javascript">

        // Blazor.Common
            // AvatarUrlEditorBox
        var expanded = false;
        function showCheckboxes(event) {
            if (!expanded) {
                event.style.display = "block";
                expanded = true;
            } else {
                event.style.display = "none";
                expanded = false;
            }
        }
        function updateCheckboxText(checked, event, dataset) {
            if (checked) {
                if (event.text == "Select an option") {
                    event.text = dataset.value;
                } else {
                    event.text += "," + dataset.value;
                }
            } else {
                if (event.text.indexOf(dataset.value) == 0) {
                    event.text = event.text.replace(dataset.value, "");
                    event.text = event.text.replace(",", "");
                    if (event.text == "") {
                        event.text = "Select an option";
                    }
                }
                else {
                    event.text = event.text.replace("," + dataset.value, "");
                }
            }
        }

        function deleteForm(child, parent) {
            if (child.value.length != 0) {

                child.value = "";
                var e = new Event('change');
                child.dispatchEvent(e);
            }
            parent.remove();
        }

        function deleteMultiSelectMenu(child, parent) {
            var e = new Event('change');
            event.target.parentNode.children[1].children[0].children[0].dispatchEvent(e);
            event.target.parentNode.remove();
        }

        // unknown
        var receiveMessage = function (event) {
            if (document.getElementById('currentUrl') != null) {
                document.getElementById('currentUrl').value = event.data;
            }
        }

        window.addEventListener('message', receiveMessage, false);

    </script>
    <link href="_content/Blazored.Toast/blazored-toast.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css" integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />
</head>
<body>
    @{
        var initialTokenState = new InitialApplicationState
        {
            XsrfToken = Xsrf.GetAndStoreTokens(HttpContext).RequestToken,
            AccessToken = await HttpContext.GetTokenAsync("access_token"),
            RefreshToken = await HttpContext.GetTokenAsync("refresh_token")
        };

        var expiresAt = await HttpContext.GetTokenAsync("expires_at");
        if (DateTimeOffset.TryParse(expiresAt,
            CultureInfo.InvariantCulture,
            DateTimeStyles.None,
            out var expiration))
        {
            initialTokenState.ExpiresAt = expiration;
        }
        else
        {
            initialTokenState.ExpiresAt = DateTimeOffset.UtcNow;
        }
    }

    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" param-InitialState="initialTokenState" />
    </app>

    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js" integrity="sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2" crossorigin="anonymous"></script>
    <script src="_content/Blazorise/blazorise.js"></script>
    <script src="js/script.js"></script>
    <script src="_framework/blazor.server.js"></script>
    <script src="JsInterop.js"></script>
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <script>

        //!!! tree, blazor.common.treeview
        const yellow = "#ffa500";
        const gray = "#e6e6e6";
        const blue = "#1E90FF";

        // BlazoriseSidebar
        function frmsubmit(form) {
            document.getElementById(form).submit();
        }
        
        //!!! tree, blazor.common.treeview
        function hover(tagName, tagId, over, highlight) {
            var element = document.getElementsByTagName(tagName);
            for (var i = 0; i < element.length; i++) {
                var currElement = element[i];
                if (currElement.id == tagId) {
                    highlight(currElement, over);
                }
            }
        }

        // blazor.common.treeview
        function highlightNode(currElement, over) {
            if (over)
                currElement.children[0].classList.add("blue");
            else
                currElement.children[0].classList.remove("blue");
        }

    </script>
</body>
</html>
