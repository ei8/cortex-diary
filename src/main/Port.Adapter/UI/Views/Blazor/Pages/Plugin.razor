@page "/cortex/{name}"
@using System.Reflection
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using ei8.Cortex.Diary.Application.Identity
@using ei8.Cortex.Diary.Application.Neurons
@using ei8.Cortex.Diary.Application.Settings
@using ei8.Cortex.Diary.Port.Adapter.Common
@inject IJSRuntime jsRuntime

@if (componentName is not null)
{
    <DynamicComponent Type="componentName" Parameters="@service"></DynamicComponent>
}

@code {

    [Inject] INeuronQueryService neuronQueryService { set; get; }
    [Inject] INeuronApplicationService neuronApplicationService { set; get; }
    [Inject] ITerminalApplicationService terminalApplicationService { set; get; }
    [Inject] IToastService toastService { set; get; }
    [Inject] ISettingsService settingsService { set; get; }
    [Inject] IIdentityService identityService { set; get; }

    [Parameter]
    public string Name { get; set; }
    public Type componentName;

    [Inject]
    public IWebHostEnvironment Environment { get; set; }

    Dictionary<string, object> service = new Dictionary<string, object>();

    protected override void OnInitialized()
    {
        service.Add("neuronQueryService", neuronQueryService);
        service.Add("neuronApplicationService", neuronApplicationService);
        service.Add("terminalApplicationService", terminalApplicationService);
        service.Add("toastService", toastService);
        service.Add("settingsService", settingsService);
        service.Add("identityService", identityService);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        //scan assembly from a folder
        //var path = System.IO.Path.Combine(Environment.ContentRootPath, "wwwroot/plugin");
        var path = this.settingsService.PluginsPath;
        string[] allfiles = Directory.GetFiles(path, "*.dll", SearchOption.AllDirectories);

        foreach (var file in allfiles)
        {
            var assembly = Assembly.LoadFrom(file);
            var fullname = assembly.GetTypes().FirstOrDefault(x => x.Name.ToLower() == Name.ToLower())?.FullName;
            if (fullname != null)
                componentName = assembly.GetType(fullname);
        }

        base.OnParametersSet();
    }
}