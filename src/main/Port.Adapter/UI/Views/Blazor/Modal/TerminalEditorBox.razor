@using Blazorise.Icons.FontAwesome
@using ei8.Cortex.Diary.Application.Neurons
@using ei8.Cortex.Diary.Domain.Model
@using ei8.Cortex.Library.Common
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.ViewModels
@using ei8.Cortex.Diary.Port.Adapter.Common
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Shared
@using Blazored.FluentValidation
@using neurUL.Cortex.Common;
@inject INeuronQueryService NeuronQueryService;

<AvatarUrlEditorBox @bind-NewAvatarUrl="@this.AvatarUrl" AvatarUrl="@this.AvatarUrl" @bind-IsVisible="@this.IsAvatarUrlVisible" />
@if (this.IsVisible)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Select Neuron</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close" @onclick="() => this.ReturnResultTerminal(null)">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container">
                        <div class="row">
                            <div class="col-auto p-0 pr-1">
                                <button class="btn btn-primary btn-sm" @onclick="this.Load">Reload</button>
                            </div>
                            <div class="col p-0">
                                <input class="form-control form-control-sm ml-1 inputEditor" placeholder="Avatar URL" @bind="AvatarUrl" />
                                <button class="inputEditorButton" @onclick="this.ShowAvatarEditorBox"><i class="fas fa-edit"></i></button>
                            </div>
                        </div>
                        <div class="row pt-2">
                            <div class="col p-0">
                                <ListView Items="@this.Children" Render="@true">
                                    <HeaderTitle>
                                        <h6>Search Results</h6>
                                    </HeaderTitle>
                                    <ItemTemplate Context="itemContext">
                                        <ConditionalDisplay Show="@true">
                                            <li style="list-style:none" @key="@itemContext.Neuron.Id">
                                                <input type="radio" id="@itemContext.Neuron.Id" checked="@( this.editorTerminalViewModel.Neuron != null && this.editorTerminalViewModel.Neuron.Id == itemContext.Neuron.Id)" @onchange="@(() => { this.editorTerminalViewModel.Neuron = new Neuron(itemContext.Neuron); })" />
                                                <label for="@itemContext.Neuron.Tag">@(!string.IsNullOrEmpty(itemContext.Neuron.Tag) ? itemContext.Neuron.Tag : " ")</label>
                                            </li>
                                        </ConditionalDisplay>
                                    </ItemTemplate>
                                </ListView>
                            </div>
                        </div>                            
                    </div>
                </div>
                <div class="modal-footer">
                    <EditForm Model="@this.editorTerminalViewModel" OnValidSubmit="@(() => this.ReturnResultTerminal(this.editorTerminalViewModel))" class="w-100" >
                        <FluentValidationValidator />
                        <div class="row">
                            <div class="col pr-1 pt-1 pb-2 col-auto">
                                <Label>
                                    Selection: 
                                </Label>
                                <Label class="font-weight-bold">
                                    @this.editorTerminalViewModel.NeuronTag
                                    <ValidationMessage For=@(() => this.editorTerminalViewModel.Neuron) />
                                </Label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col pr-1">
                                <NullableInputSelect class="btn btn-secondary btn-sm dropdown-toggle" T="RelativeType" @bind-Value="this.editorTerminalViewModel.Type">
                                    <option value="@RelativeType.Presynaptic">Presynaptic</option>
                                    <option value="@RelativeType.Postsynaptic">Postsynaptic</option>
                                </NullableInputSelect>
                                <ValidationMessage For=@(() => this.editorTerminalViewModel.Type) />
                            </div>
                            <div class="col p-0">
                                <NullableInputSelect class="btn btn-secondary btn-sm dropdown-toggle" T="NeurotransmitterEffect" @bind-Value="this.editorTerminalViewModel.Effect">
                                    <option value="@NeurotransmitterEffect.Excite">Excite</option>
                                    <option value="@NeurotransmitterEffect.Inhibit">Inhibit</option>
                                </NullableInputSelect>
                                <ValidationMessage For=@(() => this.editorTerminalViewModel.Effect) />
                            </div>
                            <div class="col p-0 pt-1">
                                <InputNumber class="form-control-xs" placeholder="Strength" style="width:80px" Step="0.1" @bind-Value="this.editorTerminalViewModel.Strength" />
                                <ValidationMessage For=@(() => this.editorTerminalViewModel.Strength) />
                            </div>
                            <div class="col p-0">
                                @if (string.IsNullOrWhiteSpace(this.editorTerminalViewModel.TerminalExternalReferenceUrl))
                                {
                                    <button type="button" class="btn btn-light btn-sm ml-1 p-1 rounded-square" @onclick="this.OnSearchExternalReferenceTerminal" title="Internal Terminal (Click to edit)">
                                        <Blazorise.Icon Name="FontAwesomeIcons.Brain" Class="px-1" />
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-light btn-sm ml-1 p-1 rounded-square" @onclick="this.OnSearchExternalReferenceTerminal" title="@(this.editorTerminalViewModel.TerminalExternalReferenceUrl + " (Click to edit)")">
                                        <Blazorise.Icon Name="FontAwesomeIcons.Globe" Class="px-1" />
                                    </button>
                                }
                                <ValidationMessage For=@(() => this.editorTerminalViewModel.TerminalExternalReferenceUrl) />
                            </div>
                            <div class="col col-auto">
                                <button class="btn btn-primary btn-sm" type="submit">Select</button>
                            </div>
                        </div>
                        
                    </EditForm>
                </div>                
            </div>
        </div>
    </div>
    <NeuronSearchBox AvatarUrl="@this.editorTerminalViewModel.TerminalExternalReferenceUrl" @bind-IsVisible="@this.IsSearchExternalReferenceTerminalVisible" @bind-SelectedNeuron="this.SelectedExternalReferenceTerminalRelative" />
}
@code {
    protected override void OnInitialized()
    {
        this.Children = new NeuronResultItemViewModel[0];
    }

    [Parameter]
    public string AvatarUrl { get; set; }
    private bool IsAvatarUrlVisible { get; set; } = false;

    private NeuronResultItemViewModel[] Children { get; set; } = new NeuronResultItemViewModel[0];

    private bool isVisible;
    [Parameter]
    public bool IsVisible
    {
        get => this.isVisible;
        set
        {
            if (this.isVisible != value)
            {
                this.isVisible = value;
                this.IsVisibleChanged.InvokeAsync(this.isVisible);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private void ReturnResultTerminal(EditorTerminalViewModel value)
    {
        this.ResultTerminal = value != null ? new EditorTerminalViewModel(value) : value;
        this.IsVisible = false;
    }

    private EditorTerminalViewModel editorTerminalViewModel = new EditorTerminalViewModel();

    private EditorTerminalViewModel selectedTerminal { get; set; }
    [Parameter]
    public EditorTerminalViewModel SelectedTerminal
    {
        get => this.selectedTerminal;
        set
        {
            if (this.selectedTerminal != value)
                this.selectedTerminal = value;

            if (this.selectedTerminal == null)
                this.editorTerminalViewModel.Initialize();
            else
            {
                // initialize editorTerminalViewModel with values from SelectedTerminal
                this.editorTerminalViewModel.Id = this.selectedTerminal.Id;
                this.editorTerminalViewModel.Neuron = new Neuron(this.selectedTerminal.Neuron);
                this.editorTerminalViewModel.Type = this.selectedTerminal.Type;
                this.editorTerminalViewModel.Effect = this.selectedTerminal.Effect;
                this.editorTerminalViewModel.Strength = this.selectedTerminal.Strength;
                this.editorTerminalViewModel.TerminalExternalReferenceUrl = this.selectedTerminal.TerminalExternalReferenceUrl;
            }
        }
    }

    private EditorTerminalViewModel resultTerminal { get; set; }
    [Parameter]
    public EditorTerminalViewModel ResultTerminal
    {
        get => this.resultTerminal;
        set
        {
            if (this.resultTerminal != value)
            {
                this.resultTerminal = value;
                this.ResultTerminalChanged.InvokeAsync(this.resultTerminal);
            }
        }
    }

    [Parameter]
    public EventCallback<EditorTerminalViewModel> ResultTerminalChanged { get; set; }

    private NeuronResultItemViewModel selectedExternalReferenceTerminalRelative;
    private NeuronResultItemViewModel SelectedExternalReferenceTerminalRelative
    {
        get => this.selectedExternalReferenceTerminalRelative;
        set
        {
            if (this.selectedExternalReferenceTerminalRelative != value)
            {
                this.selectedExternalReferenceTerminalRelative = value;
            }
        }
    }

    private bool isSearchExternalReferenceTerminalVisible = false;
    private bool IsSearchExternalReferenceTerminalVisible
    {
        get => this.isSearchExternalReferenceTerminalVisible;
        set
        {
            if (this.isSearchExternalReferenceTerminalVisible != value)
            {
                this.isSearchExternalReferenceTerminalVisible = value;

                if (!this.isSearchExternalReferenceTerminalVisible)
                {
                    if (this.selectedExternalReferenceTerminalRelative != null)
                    {
                        this.editorTerminalViewModel.TerminalExternalReferenceUrl = this.selectedExternalReferenceTerminalRelative.Neuron.Terminal.Url;
                        this.selectedExternalReferenceTerminalRelative = null;
                    }
                    else
                        this.editorTerminalViewModel.TerminalExternalReferenceUrl = string.Empty;
                }
            }
        }
    }

    private async Task Load()
    {
        var children = new List<NeuronResultItemViewModel>();
        var ns = (await NeuronQueryService.SendQuery(this.AvatarUrl)).Items;
        ns.ToList().ForEach(n => children.Add(new NeuronResultItemViewModel(new Neuron(n))));
        this.Children = children.ToArray();
    }

    private void OnSearchExternalReferenceTerminal()
    {
        this.IsSearchExternalReferenceTerminalVisible = true;
    }

    private void ShowAvatarEditorBox()
    {
        this.IsAvatarUrlVisible = true;
    }
}